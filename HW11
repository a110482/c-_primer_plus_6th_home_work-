// ----------Q6-------------
// 判斷字元有沒有在字串裡
#include <stdio.h>
#include "string.h"

int is_within(char target, char *array);
int main() {
    char ch[30] = "qazwsxedcrfvtgbyhn";
    char tar = 'k';
    printf("%d\n", is_within(tar, ch));

    return 0;
}

int is_within(char target, char *array){
    size_t len = strlen(array);
    for(size_t i=0; i<len;i++){
        if (target == array[i]){
            return 1;
        }
    }
    return 0;
}


// ----------Q7-------------
// 實作自己的strncpy
#include <stdio.h>
#include "string.h"

char* my_str_cpy(char *target,const char *source, int len);
int main() {
    char a[10] = "ssssdddd";
    char b[10] = "a";
    my_str_cpy(b, a, 5);
    printf("%s\n", b);
    return 0;
}

char* my_str_cpy(char *target,const char *source, int len){
    for (int i=0; i<len;i++){
        target[i] = source[i];
    }
    return target;
}


// --------Q8--------
// 如果字串二包含在字一串內 就傳回指標位置 否則傳回空指標
#include <stdio.h>
#include <string.h>

char* string_in(char*, char*);

int main(int argc, const char * argv[]) {
    char c[30] = "abcdeefghijklmnopqrstuv";
    char cc[10] = "gh";
    
    char *p;
    p = string_in(c, cc);
    
    printf("%s\n", p);
    return 0;
}

char* string_in(char *str_1, char *str_2){
    unsigned long len;
    for(len=0; len<strlen(str_1); len++){
        if(str_1[len] == str_2[0] && strncmp(str_1+len, str_2, strlen(str_2)) == 0){
            return str_1+len;
        }
    }
    return NULL;
}


// --------Q10--------
// 從字串中刪除空白字元的函數
// 使用迴圈讀取資料 直到空白行出現
// 印出之前的資料
#include <stdio.h>
#include <string.h>
#define LEN 5

void remove_empty(char *cha);

int main(int argc, const char * argv[]) {
    char cha_buff[LEN] = {'\0'};
    
    printf("input: ");
    while(fgets(cha_buff, LEN, stdin) != NULL){
        remove_empty(cha_buff);
        printf("%s", cha_buff);
        
        // 空白行退出
        if (cha_buff[0] == '\n'){
            break;
        }
        // 如果此次輸入含有空白或換行 開始下次輸入
        for(int cha_index = 0; cha_index < LEN; cha_index++){
            if (cha_buff[cha_index] == '\n'){
                printf("input: ");
                break;
            }
        }
        
    }
    
    return 0;
}

void remove_empty(char *cha){
    for(int cha_index = 0; cha_index < LEN; cha_index++){
        if (cha[cha_index] == ' '){
            // 這之後全部往前移
            for(int move_index = cha_index; move_index < LEN - 1; move_index++){
                cha[move_index] = *(cha+move_index+1);
            }
            cha_index--;
        }
    }
}


